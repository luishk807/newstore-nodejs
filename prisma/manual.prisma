// This model needs to be manually entered in schema.prisma everytime prisma introspect is ran
// which updates schema.prisma. This is because Prisma does not support introspect for views.
// So views need to be manually added to schema.prisma so it can be used by the Prisma Client.
// So, we add this at the end of schema.prisma file and then run "npx prisma generate" command.

model view_product {
  id            		  Int @id
  product_variant_id	Int?
  product_id    		  Int
  stock_id				    Int
  name          		  String
  description   		  String
  sku           		  String
  model         		  String?
  brand         		  String?
  category      		  String?
  department    		  String?
  option        		  String?
  option_value  		  String?
  quantity				    Int
}

// Below is the original query used as definition for the view in PostgreSQL

SELECT
	ROW_NUMBER () OVER (ORDER BY pv.id) as id
	,pv.id as product_variant_id
	,p.id as product_id
	,p.name, p.description
	,pv.sku, pv.model
	,b.name as brand
	,c.name as category
	,d.name as department
	,o.name as "option"
	,ov.value as option_value
	,st.id as stock_id
	,st.quantity as quantity
FROM product as p
LEFT JOIN product_variant as pv -- Should be JOIN and not LEFT (since the one's without variant, it should be invalid)
	ON pv.product_id = p.id

LEFT JOIN brand_product as b_p
	ON b_p.product_id = p.id
LEFT JOIN brand as b
	ON b.id = b_p.brand_id
LEFT JOIN category_product as c_p
	ON c_p.product_id = p.id
LEFT JOIN category as c
	ON c.id = c_p.category_id
LEFT JOIN department_product as d_p
	ON d_p.product_id = p.id
LEFT JOIN department as d
	ON d_p.department_id = d.id

LEFT JOIN "option" as o
	ON pv.option_id = o.id
LEFT JOIN option_value as ov
	ON pv.option_value_id = ov.id
	
LEFT JOIN stock as st
	ON st.product_id = pv.product_id AND st.product_variant_id = pv.id




// This is the view model for Stock summary

model view_stock_summary {
	row_number				Int @id
	product_id				  Int
  product_variant_id	Int?
	product_name			  String
	option					    String?
	option_value			  String?
	sku						      String?
	model					      String?
	unit_price				  Float
	quantity				    Int
	entries					    Int
}

SELECT
se.product_id,
se.product_variant_id,
p.name as product_name,
op.name as option,
ov.value as option_value,
pv.sku,
pv.model,
se.unit_price,
SUM(se.quantity) as quantity,
count(se.product_id) as entries,
ROW_NUMBER () OVER (ORDER BY se.product_id)

from stock_entry as se

LEFT JOIN product_variant as pv
ON pv.id = se.product_variant_id
JOIN  product as p
ON p.id = se.product_id
LEFT JOIN option as op
ON op.id = pv.option_id
LEFT JOIN option_value as ov
ON ov.id = pv.option_value_id

where
deleted = false

group by se.product_id,
se.product_variant_id,
p.name,
op.name,
ov.value,
pv.sku,
pv.model,
se.unit_price
